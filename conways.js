(function(){ function _getCompiled(nools){ return nools.compile({"define":[{"name":"Cell","properties":"({ state : \"dead\", evaluated: false, pos : [], __queuedState : null, constructor: function(){ this.neighbors = []; }, numberOfLiveNeighbors: function(){ var live = 0, neighbors = this.neighbors, neighbor; for(var i = 0, l = neighbors.length; i < l; i++){ if(neighbors[i].state === \"live\"){ live++; } } return live; }, addNeighbor: function(neighbor){ this.neighbors.push(neighbor); neighbor.neighbors.push(this); return this; }, queueNextState: function(state){ if(this.state !== state){ this.__queuedState = state; } }, transition: function(){ var ret = false; if(this.__queuedState !== null){ this.state = this.__queuedState; this.__queuedState = null; ret = true; } return ret; } })"}],"rules":[{"name":"Pause","options":{},"constraints":[["String","state","state == 'pause'"]],"action":"emit(\"pause\"); retract(state); halt(); "},{"name":"Populate","options":{},"constraints":[["String","state","state == 'populate'"],["Array","cells"]],"action":"loop(cells, function(cell){ assert(cell); }); emit(\"evaluate\"); retract(state); assert(\"evaluate\"); "},{"name":"KillTheLonely","options":{},"constraints":[["String","state","state == 'evaluate'"],["Cell","c","c.state == 'live' && c.numberOfLiveNeighbors() < 2"]],"action":"c.queueNextState(\"dead\"); "},{"name":"KillTheOverCrowded","options":{},"constraints":[["String","state","state == 'evaluate'"],["Cell","c","c.state == 'live' && c.numberOfLiveNeighbors() > 3"]],"action":"c.queueNextState(\"dead\"); "},{"name":"GiveBirth","options":{},"constraints":[["String","state","state == 'evaluate'"],["Cell","c","c.state == 'dead' && c.numberOfLiveNeighbors() == 3"]],"action":"c.queueNextState(\"live\"); "},{"name":"ShouldTransition","options":{},"constraints":[["String","state","state == 'evaluate'"]],"action":"retract(state); assert(\"transition\"); "},{"name":"Transition","options":{},"constraints":[["Array","cells"],["String","state","state == 'transition'"]],"action":"retract(state); var transitioned = false; loop(cells, function(cell){ retract(cell); if(cell.transition()){ emit(\"cell-transition\", cell); transitioned = true; } }); assert(transitioned ? \"populate\" : \"done\"); "},{"name":"Done","options":{},"constraints":[["Array","cells"],["String","state","state == 'done'"]],"action":"console.log(\"Done\"); "}],"scope":[{"name":"loop","body":"function(cells, cb){ var rows = cells.length, cols = cells[0].length; for (var i = 0; i < rows; i++) { for (var j = 0; j < cols; j++) { cb(cells[i][j]); } } }"}]}, {name : "conways"}); } if ("undefined" !== typeof exports) { if ("undefined" !== typeof module && module.exports) { return _getCompiled(require("nools")); } } else if ("function" === typeof define && define.amd) { define(["nools"], function (nools) { return _getCompiled(nools); }); } else { _getCompiled(this.nools); } }).call(this);
